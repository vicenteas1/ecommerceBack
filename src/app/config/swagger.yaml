openapi: 3.0.3
info:
  title: API de Usuarios y Productos
  version: 1.0.0
  description: |
    API generada a partir de los archivos proporcionados (rutas, controladores y servicios de **users** y **products**).
    Incluye autenticación Bearer (JWT) y control de roles (buyer/seller) según los *middlewares* usados en las rutas.

servers:
  - url: /api
  - url: http://localhost:3000/api

tags:
  - name: Users
    description: Gestión de usuarios y autenticación
  - name: Products
    description: CRUD de productos

paths:
  /users/register:
    post:
      tags: [Users]
      summary: Registrar un nuevo usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
            examples:
              ejemplo:
                value:
                  username: juan
                  email: juan@example.com
                  password: "123456"
                  role: buyer
      responses:
        '201':
          description: Usuario creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUser'
        '400':
          description: Error de validación o solicitud
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/login:
    post:
      tags: [Users]
      summary: Iniciar sesión (obtener JWT)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
            examples:
              ejemplo:
                value:
                  email: juan@example.com
                  password: "123456"
      responses:
        '200':
          description: Inicio de sesión exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseLogin'
        '401':
          description: Credenciales inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Error de validación o solicitud
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/verifytoken:
    get:
      tags: [Users]
      summary: Verificar el JWT y, opcionalmente, refrescarlo
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token verificado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseVerify'
        '401':
          description: Token faltante o inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/update/{id}:
    put:
      tags: [Users]
      summary: Actualizar un usuario por ID
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
            examples:
              ejemplo:
                value:
                  username: juan-actualizado
                  email: juan.actualizado@example.com
                  password: "12345678"
      responses:
        '200':
          description: Usuario actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUser'
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Error de validación o solicitud
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/create:
    post:
      tags: [Products]
      summary: Crear un nuevo producto
      description: Requiere rol **seller**.
      security:
        - bearerAuth: []
      x-roles:
        - seller
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
            examples:
              ejemplo:
                value:
                  nombre: Teclado Mecánico 60%
                  descripcion: Switches rojos, retroiluminado
                  precio: 59.99
      responses:
        '201':
          description: Producto creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseProduct'
        '400':
          description: Error de validación o solicitud
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token faltante o inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Rol insuficiente (se requiere seller)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/readAll:
    get:
      tags: [Products]
      summary: Listar todos los productos
      description: Requiere rol **buyer**.
      security:
        - bearerAuth: []
      x-roles:
        - buyer
      responses:
        '200':
          description: Lista de productos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseProductList'
        '401':
          description: Token faltante o inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Rol insuficiente (se requiere buyer)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/readOne/{id}:
    get:
      tags: [Products]
      summary: Obtener un producto por ID
      description: Requiere rol **buyer**.
      security:
        - bearerAuth: []
      x-roles:
        - buyer
      parameters:
        - $ref: '#/components/parameters/IdPath'
      responses:
        '200':
          description: Producto encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseProduct'
        '404':
          description: Producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token faltante o inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Rol insuficiente (se requiere buyer)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/update/{id}:
    put:
      tags: [Products]
      summary: Actualizar un producto por ID
      description: Requiere rol **seller**.
      security:
        - bearerAuth: []
      x-roles:
        - seller
      parameters:
        - $ref: '#/components/parameters/IdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
            examples:
              ejemplo:
                value:
                  nombre: Teclado 60% v2
                  precio: 64.99
      responses:
        '200':
          description: Producto actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseProduct'
        '404':
          description: Producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token faltante o inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Rol insuficiente (se requiere seller)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/delete/{id}:
    delete:
      tags: [Products]
      summary: Eliminar un producto por ID
      description: Requiere rol **seller**.
      security:
        - bearerAuth: []
      x-roles:
        - seller
      parameters:
        - $ref: '#/components/parameters/IdPath'
      responses:
        '200':
          description: Producto eliminado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseProduct'
        '404':
          description: Producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token faltante o inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Rol insuficiente (se requiere seller)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    IdPath:
      in: path
      name: id
      required: true
      description: Identificador del recurso (ObjectId de MongoDB)
      schema:
        type: string
        pattern: '^[a-fA-F0-9]{24}$'
      example: 64b7c1a7e3c4f0a1b2c3d4e5

  schemas:
    # ===== USUARIOS =====
    UserBase:
      type: object
      properties:
        username:
          type: string
          example: juan
        email:
          type: string
          format: email
          example: juan@example.com
        password:
          type: string
          format: password
          example: "123456"
        role:
          type: string
          description: Rol del usuario (según middlewares de la app)
          enum: [buyer, seller, admin]
          default: buyer
    User:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          properties:
            id:
              type: string
              example: 64b7c1a7e3c4f0a1b2c3d4e5
            password:
              type: string
              nullable: true
              description: No se expone en respuestas (se muestra aquí solo para completar el modelo base)
            fech_creacion:
              type: string
              format: date-time
            fech_modif:
              type: string
              format: date-time
    UserCreate:
      allOf:
        - $ref: '#/components/schemas/UserBase'
      required: [username, email, password]
    UserUpdate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    LoginInput:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    LoginResult:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          description: JWT de acceso

    VerifyTokenResult:
      type: object
      properties:
        valid:
          type: boolean
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          description: Presente solo si `refresh=true`

    ApiResponseUser:
      type: object
      properties:
        code:
          type: integer
          example: 201
        message:
          type: string
          example: OK
        data:
          $ref: '#/components/schemas/User'

    ApiResponseLogin:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: OK
        data:
          $ref: '#/components/schemas/LoginResult'

    ApiResponseVerify:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        data:
          $ref: '#/components/schemas/VerifyTokenResult'

    # ===== PRODUCTOS =====
    ProductBase:
      type: object
      properties:
        nombre:
          type: string
          example: Teclado Mecánico 60%
        descripcion:
          type: string
          example: Switches rojos, retroiluminado
        precio:
          type: number
          example: 59.99
    Product:
      allOf:
        - $ref: '#/components/schemas/ProductBase'
        - type: object
          properties:
            id:
              type: string
              example: 64b7c1a7e3c4f0a1b2c3d4e5
            createdBy:
              type: string
              description: ID del usuario creador
              example: 64b7c1a7e3c4f0a1b2c3d4e5
            updatedBy:
              type: string
              description: ID del último usuario que modificó
              example: 64b7c1a7e3c4f0a1b2c3d4e5
    ProductCreate:
      allOf:
        - $ref: '#/components/schemas/ProductBase'
      required: [nombre, precio]
    ProductUpdate:
      type: object
      properties:
        nombre:
          type: string
        descripcion:
          type: string
        precio:
          type: number

    ApiResponseProduct:
      type: object
      properties:
        code:
          type: integer
          example: 201
        message:
          type: string
          example: OK
        data:
          $ref: '#/components/schemas/Product'
    ApiResponseProductList:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: OK
        data:
          type: array
          items:
            $ref: '#/components/schemas/Product'

    # ===== ERRORES =====
    Error:
      type: object
      properties:
        message:
          type: string
        error:
          type: string
          nullable: true
